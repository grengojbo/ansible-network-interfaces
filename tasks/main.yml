---
- name: create directory
  file:
    path: "{{ network_interface_path }}"
    state: directory
  when: network_interfaces

- name: create /etc/iproute2/rt_tables
  lineinfile:
    dest=/etc/iproute2/rt_tables
    regexp='{{item.id}} {{item.name}}'
    line='{{item.id}} {{item.name}}' state=present
  with_items: network_tables

- name: all interfaces
  template:
    src: all_interfaces.j2
    dest: "{{ network_all_interfaces_path }}"
  notify: restart
  when: network_interfaces

- name: list network interfaces
  command: "find {{ network_interface_path }} -type f"
  changed_when: no
  when: network_interfaces
  register: network_existing_files

- name: configurations
  template:
    src: device.j2
    dest: "{{ network_interface_path }}/device-{{ item.device }}-{{ item.family | default('inet') }}"
  with_items: network_interfaces
  register: network_configuration_result

- name: configured files
  set_fact:
    network_configured_files: >
      [{% for item in network_configuration_result.results | default([]) -%}
        u"{{ item.dest | default(item.path) }}"
        {{ '' if loop.last else ',' }}
      {%- endfor %}]

- name: remove configurations
  file:
    dest: "{{ item }}"
    state: absent
  when: >
    network_manage_devices
    and (item not in network_configured_files)
  with_items: network_existing_files.stdout_lines | default([])

- name: restart devices
  service:
    name: "{{ network_service }}"
    state: restarted
    arguments: "INTERFACE={{ item.0 }}"
  when: >
   (0 != item.1 | selectattr('changed') | list | length)
  with_items: network_configuration_result.results | default([]) | groupby('item.device')
